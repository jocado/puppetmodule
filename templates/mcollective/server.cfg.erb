# /etc/mcollective/server.cfg
libdir = <%= @libdir %>
classesfile = <%= @classesfile %>
daemonize = 1
direct_addressing = 1
<% if( @collectives ) then -%>
main_collective = <%= @collectives[0] %>
collectives = <%= @collectives.join(',') %>
<% end -%>
identity = <%= @fqdn %>

# ActiveMQ connector settings:
connector = <%= @connector %>
<% if( @connector == 'rabbitmq' ) then -%>
plugin.rabbitmq.vhost = /mcollective
<% elsif( @connector == 'activemq' ) then -%>
plugin.activemq.heartbeat_interval = 30
<% if( @activemq_base64 ) then -%>
plugin.activemq.base64 = yes
<% end -%>
<% if( @activemq_base64 == false) then -%>
plugin.activemq.base64 = no
<% end -%>
<% end -%>
plugin.<%= @connector -%>.pool.size = <%= @hosts.length %>
<% @hosts.each_with_index do |mqhost, index| -%>
plugin.<%= @connector -%>.pool.<%= index+1 -%>.host = <%= mqhost %>
plugin.<%= @connector -%>.pool.<%= index+1 -%>.port = <%= @port %>
plugin.<%= @connector -%>.pool.<%= index+1 -%>.user = <%= @server_user %>
plugin.<%= @connector -%>.pool.<%= index+1 -%>.password = <%= @server_password %>
plugin.<%= @connector -%>.pool.<%= index+1 -%>.ssl = <%= @connector_ssl %>
<% if( @connector_ssl_type == 'trusted' ) then -%>
plugin.<%= @connector -%>.pool.<%= index+1 -%>.ssl.key = <%= @ssldir -%>/private_keys/<%= scope['::clientcert'] -%>.pem
plugin.<%= @connector -%>.pool.<%= index+1 -%>.ssl.cert = <%= @ssldir -%>/certs/<%= scope['::clientcert'] -%>.pem
plugin.<%= @connector -%>.pool.<%= index+1 -%>.ssl.ca = <%= @ssldir -%>/certs/ca.pem
<% else -%>
plugin.<%= @connector -%>.pool.<%= index+1 -%>.ssl.fallback = true
<% end -%>
<% end -%>

# Send these messages to keep the Stomp connection alive.
# This solves NAT and firewall timeout problems.
registerinterval = <%= @registerinterval %>

# Security provider
<% if( @security_provider == 'psk' ) then -%>
securityprovider = psk
plugin.psk = <%= @psk_key %>
<% elsif( @security_provider == 'sshkey' ) then -%>
securityprovider = sshkey
<% if( @sshkey_authorized_keys ) then -%>
plugin.sshkey.server.known_hosts = <%= @sshkey_authorized_keys %>
<% end -%>
<% elsif( @security_provider == 'ssl' ) then -%>
securityprovider = ssl
plugin.ssl_server_private = <%= @etcdir -%>/ssl/server/private.pem
plugin.ssl_server_public = <%= @etcdir -%>/ssl/server/public.pem
plugin.ssl_client_cert_dir = <%= @etcdir -%>/ssl/clients
<% elsif( @security_provider == 'aes_security' ) then -%>
securityprovider = aes_security
plugin.aes.server_public = <%= @ssldir -%>/public_keys/<%= scope['::clientcert'] -%>.pem
plugin.aes.server_private = <%= @ssldir -%>/private_keys/<%= scope['::clientcert'] -%>.pem
plugin.aes.client_cert_dir = <%= @etcdir -%>/ssl/clients
plugin.aes.enforce_ttl = true
<% end -%>

# Facts
factsource = yaml
plugin.yaml = <%= @etcdir %>/facts.yaml

# Puppet resource control
plugin.puppet.resource_allow_managed_resources = <%= @allow_managed_resources %>
<% if( @resource_type_whitelist ) then -%>
plugin.puppet.resource_type_whitelist = <%= @resource_type_whitelist %>
<% else -%>
plugin.puppet.resource_type_blacklist = <%= @resource_type_blacklist %>
<% end -%>

<% if( @audit_logfile ) then -%>
# Auditing
rpcaudit = 1
rpcauditprovider = Logfile
plugin.rpcaudit.logfile = <%= @audit_logfile %>
<% end -%>

<% if( @authorization_enable ) then -%>
# Authorization policy
rpcauthorization = 1
rpcauthprovider = action_policy
<% if( @authorization_default_policy ) then -%>
plugin.actionpolicy.enable_default = 1
plugin.actionpolicy.default_name = <%= @authorization_default_policy -%>
<% else -%>
plugin.actionpolicy.allow_unconfigured = 1
<% end -%>
<% end -%>

# Logging
logger_type = <%= @logger_type %>
loglevel = <%= @log_level %>
<% if( @logger_type == 'syslog' ) then -%>
logfacility = <%= @logfacility %>
<% end -%>
<% if( @logger_type == 'file' ) then -%>
logfile = <%= @logfile %>
<% if( @keeplogs ) then -%>
keeplogs = <%= @keeplogs %>
<% end -%>
<% if( @max_log_size ) then -%>
max_log_size = <%= @max_log_size %>
<% end -%>
<% end -%>
